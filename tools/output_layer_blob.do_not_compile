#include <caffe/caffe.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <iosfwd>
#include <memory>
#include <string>
#include <utility>
#include <vector>
DEFINE_int32(gpu, -1,
    "Run in GPU mode on given device ID.");
using namespace caffe;  // NOLINT(build/namespaces)
using namespace std;

int main(int argc, char** argv) {
  const string deploy_src(argv[1]);
  const string model_src(argv[2]);
  const string name_layer(argv[3]);
  const string folder_dst(argv[4]);

  int provided;
  MPI_Init_thread(&argc, &argv, MPI_THREAD_MULTIPLE, &provided);
  if(provided != MPI_THREAD_MULTIPLE)
  {
     LOG(INFO)<<"MPI do not Support Multiple thread\n";
     exit(0);
  }
  int thread_id=0,thread_num=0,gpus_per_node=0,thread_per_node=0,node_num=0;
  MPI_Comm_rank(MPI_COMM_WORLD, &thread_id); 
  MPI_Comm_size(MPI_COMM_WORLD, &thread_num);
  CUDA_CHECK(cudaGetDeviceCount(&gpus_per_node));
  if(FLAGS_gpu == -1) FLAGS_gpu = 0;
  thread_per_node = gpus_per_node - FLAGS_gpu;
  FLAGS_gpu += thread_id % thread_per_node;
  CUDA_CHECK(cudaSetDevice(FLAGS_gpu));
  node_num = thread_num / thread_per_node;
  Caffe::setThreadId(thread_id);
  Caffe::setThreadNum(thread_num); 
  Caffe::setThreadPerNode(thread_per_node); 
  Caffe::setNodeNum(node_num);

  //load model
  Net<float> net_src(deploy_src, caffe::TEST);
  net_src.CopyTrainedLayersFrom(model_src);

  const shared_ptr<Layer<float> > layer = net_src.layer_by_name(name_layer);
  vector<shared_ptr<Blob<float> > >& blobs = layer->blobs();

  char path[260];
  for (int i = 0; i < int(blobs.size()); ++i)
  {
  	sprintf(path, "%s/blob_%d.bin", folder_dst.c_str(), i);
  	FILE *fid = fopen(path, "wb");
  	CHECK(NULL != fid) << "Failed to open " << path << "for writing";

  	shared_ptr<Blob<float> > &blob = blobs[i];
  	const int width = blob->width(), height = blob->height(), chn = blob->channels(), num = blob->num();
  	fwrite(&width, sizeof(float), 1, fid);
  	fwrite(&height, sizeof(float), 1, fid);
  	fwrite(&chn, sizeof(float), 1, fid);
  	fwrite(&num, sizeof(float), 1, fid);
  	fwrite(blob->cpu_data(), sizeof(float), blob->count(), fid);
  	fclose(fid);
  }

 return 0;
}
